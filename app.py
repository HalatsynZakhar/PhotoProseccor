# app.py

# --- –ë–õ–û–ö –ü–†–û–í–ï–†–ö–ò –ò –£–°–¢–ê–ù–û–í–ö–ò –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô ---
import sys
import subprocess
import importlib
import os
import time
print("="*50); print("--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ ---"); #... (–≤–µ—Å—å –±–ª–æ–∫)
# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è installed_packages_info ---
installed_packages_info = []
for package_name in ["streamlit", "Pillow", "natsort"]:
    module_map = { "streamlit": "streamlit", "Pillow": "PIL", "natsort": "natsort" }
    module_name = module_map[package_name]
    try: importlib.import_module(module_name); print(f"[OK] {package_name} found."); installed_packages_info.append(f"{package_name} (OK)")
    except ImportError: print(f"[!] {package_name} not found. Installing..."); # ... (–∫–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏) ...; installed_packages_info.append(f"{package_name} (Installed/Error)")
print("="*50); print("--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---"); print("–°—Ç–∞—Ç—É—Å –ø–∞–∫–µ—Ç–æ–≤:", ", ".join(installed_packages_info)); print("="*50)
needs_restart = any("(Installed" in s for s in installed_packages_info) # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞
if needs_restart: print("\n[–í–ê–ñ–ù–û] –ë—ã–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏...")
# === –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –ü–†–û–í–ï–†–ö–ò ===

# === –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ ===
print("–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
try:
    import streamlit as st
    from PIL import Image
    from io import StringIO
    import logging
    from typing import Dict, Any, Optional, Tuple, List

    import config_manager
    import processing_workflows
    print("–ú–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
except ImportError as e: print(f"\n[!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê] Import Error: {e}"); sys.exit(1)
except Exception as e: print(f"\n[!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê] App Import Error: {e}"); import traceback; traceback.print_exc(); sys.exit(1)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
log_stream = StringIO()
log_level = logging.DEBUG # <-- –£–°–¢–ê–ù–û–í–ò–¢–ï DEBUG –î–õ–Ø –û–¢–õ–ê–î–ö–ò
logging.basicConfig(stream=log_stream, level=log_level, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s', datefmt='%H:%M:%S')
log = logging.getLogger(__name__)
log.info(f"Logging configured at level: {logging.getLevelName(log_level)}")

# === –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Streamlit ===

# --- –ó–∞–≥—Ä—É–∑–∫–∞/–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ù–∞—Å—Ç—Ä–æ–µ–∫ ---
CONFIG_FILE = "settings.json"
log.debug(f"Loading settings from {CONFIG_FILE}")
settings = config_manager.load_settings(CONFIG_FILE)
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ session_state –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
if 'current_settings' not in st.session_state:
    log.debug("Initializing current_settings in session_state.")
    st.session_state.current_settings = settings.copy() # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_setting(key_path: str, default: Any = None) -> Any:
    keys = key_path.split('.')
    value = st.session_state.current_settings
    try:
        for key in keys: value = value[key]
        if isinstance(value, (list, dict)): return value.copy()
        return value
    except (KeyError, TypeError):
        # log.debug(f"Setting '{key_path}' not found, returning default: {default}")
        if isinstance(default, (list, dict)): return default.copy()
        return default

def set_setting(key_path: str, value: Any):
    keys = key_path.split('.')
    d = st.session_state.current_settings
    try:
        for key in keys[:-1]:
            if key not in d or not isinstance(d[key], dict): d[key] = {}
            d = d[key]
        d[keys[-1]] = value.copy() if isinstance(value, (list, dict)) else value
        # log.debug(f"(set_setting) '{key_path}' = {value}") # –û—Ç–ª–∞–¥–∫–∞
    except TypeError as e: log.error(f"Error setting '{key_path}': {e}")


# --- UI ---
st.set_page_config(layout="wide", page_title="–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
st.title("üñºÔ∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –û–±—Ä–∞–±–æ—Ç–∫–∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
st.markdown("–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–∞–∂–µ–π.")
st.divider()

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤ —ç—Ç–æ–º —Ä–µ–Ω–¥–µ—Ä–µ ---
# –í–∞–∂–Ω–æ: —ç—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –±—É–¥–µ—Ç False –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ä–µ–Ω–¥–µ—Ä–µ, –∫—Ä–æ–º–µ —Ç–æ–≥–æ,
# –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–∏–∑–æ—à–µ–ª –°–†–ê–ó–£ –ü–û–°–õ–ï –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏.
start_button_pressed_this_run = False

# --- UI: –ë–æ–∫–æ–≤–∞—è –ü–∞–Ω–µ–ª—å ---
with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

    # --- –í—ã–±–æ—Ä –†–µ–∂–∏–º–∞ –†–∞–±–æ—Ç—ã ---
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º callback –î–û –≤–∏–¥–∂–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç
    def mode_change_callback():
        log.debug(f"Mode changed via UI to: {st.session_state.processing_mode_selector_widget}")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –Ω–∞—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∂–µ
        set_setting("processing_mode_selector", st.session_state.processing_mode_selector_widget)
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–±—Ä–æ—Å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥—Ä—É–≥–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_setting –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω–¥–µ–∫—Å–∞ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏
    current_mode_setting = get_setting("processing_mode_selector", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    mode_options = ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤", "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–∞–∂–∞")
    default_mode_index = mode_options.index(current_mode_setting) if current_mode_setting in mode_options else 0

    # –í–∏–¥–∂–µ—Ç —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ —Å callback'–æ–º
    st.radio(
        "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        mode_options,
        index=default_mode_index,
        key='processing_mode_selector_widget', # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞
        on_change=mode_change_callback,
        help="–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å: –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ, –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–∞–∂ –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤."
    )
    # --- –ó–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –±–µ—Ä–µ–º –∏–∑ session_state ---
    # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ on_change
    processing_mode = st.session_state.processing_mode_selector_widget
    log.debug(f"Current processing_mode from widget state: {processing_mode}")

    st.divider()

    # --- –û–±—â–∏–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–ü—É—Ç–∏) ---
    st.subheader("–ü—É—Ç–∏")
    set_setting('paths.input_folder_path', st.text_input("–ü–∞–ø–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏:", value=get_setting('paths.input_folder_path', ''), key='path_input', placeholder="C:/Users/User/Pictures/Source"))
    # --- –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ –ø–æ–ª—è –ø—É—Ç–µ–π, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –≤ –ª–æ–≥–∏–∫–µ ---
    set_setting('paths.output_folder_path', st.text_input("–ü–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–û—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã):", value=get_setting('paths.output_folder_path', ''), key='path_output_ind', placeholder="C:/Users/User/Pictures/Processed"))
    set_setting('paths.backup_folder_path', st.text_input("–ü–∞–ø–∫–∞ –¥–ª—è –±—ç–∫–∞–ø–æ–≤ (–û—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã, –ø—É—Å—Ç–æ = –≤—ã–∫–ª):", value=get_setting('paths.backup_folder_path', ''), key='path_backup_ind', placeholder="C:/Users/User/Pictures/Backup"))
    set_setting('paths.output_filename', st.text_input("–ò–º—è —Ñ–∞–π–ª–∞ –∫–æ–ª–ª–∞–∂–∞ (–≤ –ø–∞–ø–∫–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞):", value=get_setting('paths.output_filename', 'collage.jpg'), key='path_output_coll'))
    st.divider()

    # --- –û–±—â–∏–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –û–±—Ä–∞–±–æ—Ç–∫–∏ (–≤ expanders) ---
    st.subheader("–û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)")
    with st.expander("1. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ—Å–∞–π–∑", expanded=False):
        enable_preresize = st.checkbox("–í–∫–ª—é—á–∏—Ç—å##pre", value=get_setting('preprocessing.enable_preresize', False), key='pre_enable')
        set_setting('preprocessing.enable_preresize', enable_preresize)
        if enable_preresize:
            cols_preresize = st.columns(2)
            set_setting('preprocessing.preresize_width', cols_preresize[0].number_input("–ú–∞–∫—Å. –® (–ø–∏–∫—Å)##pre", 0, value=get_setting('preprocessing.preresize_width', 2500), step=10, key='pre_w'))
            set_setting('preprocessing.preresize_height', cols_preresize[1].number_input("–ú–∞–∫—Å. –í (–ø–∏–∫—Å)##pre", 0, value=get_setting('preprocessing.preresize_height', 2500), step=10, key='pre_h'))
        else: set_setting('preprocessing.preresize_width', 0); set_setting('preprocessing.preresize_height', 0)

    with st.expander("2. –û—Ç–±–µ–ª–∏–≤–∞–Ω–∏–µ", expanded=False):
        enable_whitening = st.checkbox("–í–∫–ª—é—á–∏—Ç—å##wh", value=get_setting('whitening.enable_whitening', True), key='wh_enable')
        set_setting('whitening.enable_whitening', enable_whitening)
        if enable_whitening:
            set_setting('whitening.whitening_cancel_threshold', st.slider("–ü–æ—Ä–æ–≥ –æ—Ç–º–µ–Ω—ã (—Å—É–º–º–∞ RGB)##wh", 0, 765, value=get_setting('whitening.whitening_cancel_threshold', 550), key='wh_thresh'))

    with st.expander("3. –§–æ–Ω –∏ –û–±—Ä–µ–∑–∫–∞", expanded=False):
        enable_bg_crop = st.checkbox("–í–∫–ª—é—á–∏—Ç—å##bgc", value=get_setting('background_crop.enable_bg_crop', False), key='bgc_enable')
        set_setting('background_crop.enable_bg_crop', enable_bg_crop)
        if enable_bg_crop:
            set_setting('background_crop.white_tolerance', st.slider("–î–æ–ø—É—Å–∫ –±–µ–ª–æ–≥–æ —Ñ–æ–Ω–∞##bgc", 0, 255, value=get_setting('background_crop.white_tolerance', 0), key='bgc_tol'))
            crop_abs = st.checkbox("–ê–±—Å–æ–ª—é—Ç–Ω–æ —Å–∏–º–º. –æ–±—Ä–µ–∑–∫–∞##bgc", value=get_setting('background_crop.crop_symmetric_absolute', False), key='bgc_abs')
            set_setting('background_crop.crop_symmetric_absolute', crop_abs)
            if not crop_abs:
                 crop_axes = st.checkbox("–°–∏–º–º. –æ–±—Ä–µ–∑–∫–∞ –ø–æ –æ—Å—è–º##bgc", value=get_setting('background_crop.crop_symmetric_axes', False), key='bgc_axes')
                 set_setting('background_crop.crop_symmetric_axes', crop_axes)
            else: set_setting('background_crop.crop_symmetric_axes', False)
        else: set_setting('background_crop.white_tolerance', 0); set_setting('background_crop.crop_symmetric_absolute', False); set_setting('background_crop.crop_symmetric_axes', False)

    with st.expander("4. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π", expanded=False):
        enable_padding = st.checkbox("–í–∫–ª—é—á–∏—Ç—å##pad", value=get_setting('padding.enable_padding', False), key='pad_enable')
        set_setting('padding.enable_padding', enable_padding)
        if enable_padding:
            set_setting('padding.padding_percent', st.slider("–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª–µ–π (%)##pad", 0.0, 50.0, value=get_setting('padding.padding_percent', 5.0), step=0.5, key='pad_perc'))
            set_setting('padding.perimeter_margin', st.number_input("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–∏–º–µ—Ç—Ä–∞ (–ø–∏–∫—Å, 0=–≤—ã–∫–ª)##pad", 0, value=get_setting('padding.perimeter_margin', 0), step=1, key='pad_margin'))
            set_setting('padding.allow_expansion', st.checkbox("–†–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–ª—è–º —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä?##pad", value=get_setting('padding.allow_expansion', True), key='pad_expand'))
        else: set_setting('padding.padding_percent', 0.0); set_setting('padding.perimeter_margin', 0); set_setting('padding.allow_expansion', False)

    st.divider()

    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏, –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –†–µ–∂–∏–º–∞ ---
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±–∞ –±–ª–æ–∫–∞ –≤—Å–µ–≥–¥–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    st.subheader("5. –ù–∞—Å—Ç—Ä–æ–π–∫–∏: –û—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã")
    with st.container():
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º disable, –µ—Å–ª–∏ —Ä–µ–∂–∏–º –Ω–µ —Ç–æ—Ç? –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∏–¥–∏–º—ã–º.
        # disable_ind = (processing_mode != "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤") # –§–ª–∞–≥ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        with st.expander("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ##ind", expanded=True):
            set_setting('individual_mode.article_name', st.text_input("–ê—Ä—Ç–∏–∫—É–ª (–ø—É—Å—Ç–æ = –≤—ã–∫–ª)##ind", value=get_setting('individual_mode.article_name', ''), key='ind_article')) #, disabled=disable_ind))
            set_setting('individual_mode.delete_originals', st.checkbox("–£–¥–∞–ª—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—ã?##ind", value=get_setting('individual_mode.delete_originals', False), key='ind_delete')) #, disabled=disable_ind))
            st.caption("‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–∞–ø–∫–∏ –≤–≤–æ–¥–∞ –∏ –≤—ã–≤–æ–¥–∞ –†–ê–ó–ù–´–ï!")
        with st.expander("–§–∏–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏##ind", expanded=True):
            st.caption("–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω (W:H, 0=–≤—ã–∫–ª)")
            cols_ratio_ind = st.columns(2)
            current_ratio_ind = get_setting('individual_mode.force_aspect_ratio', None)
            default_w_ind = float(current_ratio_ind[0]) if current_ratio_ind else 0.0; default_h_ind = float(current_ratio_ind[1]) if current_ratio_ind else 0.0
            ratio_w_ind = cols_ratio_ind[0].number_input("W##ind_ratio", 0.0, value=default_w_ind, step=0.1, key='ind_ratio_w', label_visibility="collapsed") #, disabled=disable_ind))
            ratio_h_ind = cols_ratio_ind[1].number_input("H##ind_ratio", 0.0, value=default_h_ind, step=0.1, key='ind_ratio_h', label_visibility="collapsed") #, disabled=disable_ind))
            if ratio_w_ind > 0 and ratio_h_ind > 0: set_setting('individual_mode.force_aspect_ratio', [ratio_w_ind, ratio_h_ind])
            else: set_setting('individual_mode.force_aspect_ratio', None)
            st.caption("–ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä (–®x–í, 0=–≤—ã–∫–ª)")
            cols_max_dims_ind = st.columns(2)
            set_setting('individual_mode.max_output_width', cols_max_dims_ind[0].number_input("–®##ind_max", 0, value=get_setting('individual_mode.max_output_width', 1500), step=50, key='ind_max_w', label_visibility="collapsed")) #, disabled=disable_ind))
            set_setting('individual_mode.max_output_height', cols_max_dims_ind[1].number_input("–í##ind_max", 0, value=get_setting('individual_mode.max_output_height', 1500), step=50, key='ind_max_h', label_visibility="collapsed")) #, disabled=disable_ind))
            st.caption("–¢–æ—á–Ω—ã–π —Ö–æ–ª—Å—Ç (–®x–í, 0=–≤—ã–∫–ª)")
            cols_exact_dims_ind = st.columns(2)
            set_setting('individual_mode.final_exact_width', cols_exact_dims_ind[0].number_input("–®##ind_exact", 0, value=get_setting('individual_mode.final_exact_width', 0), step=50, key='ind_exact_w', label_visibility="collapsed")) #, disabled=disable_ind))
            set_setting('individual_mode.final_exact_height', cols_exact_dims_ind[1].number_input("–í##ind_exact", 0, value=get_setting('individual_mode.final_exact_height', 0), step=50, key='ind_exact_h', label_visibility="collapsed")) #, disabled=disable_ind))
        with st.expander("–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞##ind", expanded=True):
            ind_format = st.selectbox("–§–æ—Ä–º–∞—Ç:##ind", ('jpg', 'png'), index=0 if get_setting('individual_mode.output_format', 'jpg') == 'jpg' else 1, key='ind_output_format') #, disabled=disable_ind))
            set_setting('individual_mode.output_format', ind_format)
            if ind_format == 'jpg': set_setting('individual_mode.jpeg_quality', st.slider("–ö–∞—á–µ—Å—Ç–≤–æ JPG:##ind", 1, 100, value=get_setting('individual_mode.jpeg_quality', 95), step=1, key='ind_jpeg_quality')) #, disabled=disable_ind))

    st.divider()
    st.subheader("6. –ù–∞—Å—Ç—Ä–æ–π–∫–∏: –°–æ–∑–¥–∞–Ω–∏–µ –ö–æ–ª–ª–∞–∂–∞")
    with st.container():
        # disable_coll = (processing_mode != "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–∞–∂–∞") # –§–ª–∞–≥ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        with st.expander("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∫–∏##coll", expanded=True):
            set_setting('collage_mode.forced_cols', st.number_input("–ö–æ–ª-–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ (0=–∞–≤—Ç–æ)##coll", 0, value=get_setting('collage_mode.forced_cols', 0), step=1, key='coll_cols')) #, disabled=disable_coll))
            set_setting('collage_mode.spacing_percent', st.slider("–û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É (%)##coll", 0.0, 20.0, value=get_setting('collage_mode.spacing_percent', 2.0), step=0.5, key='coll_space')) #, disabled=disable_coll))
        with st.expander("–ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ##coll", expanded=False):
             prop_enabled = st.checkbox("–í–∫–ª—é—á–∏—Ç—å##coll_prop", value=get_setting('collage_mode.proportional_placement', False), key='coll_prop') #, disabled=disable_coll))
             set_setting('collage_mode.proportional_placement', prop_enabled)
             if prop_enabled:
                 ratios_str = st.text_input("–ö–æ—ç—Ñ—Ñ. (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä: 1,0.8,1)##coll_prop", value=", ".join(map(str, get_setting('collage_mode.placement_ratios', [1.0]))), key='coll_ratios_str') #, disabled=disable_coll))
                 try:
                     ratios_list = [float(x.strip()) for x in ratios_str.split(',') if x.strip()]
                     if not ratios_list: ratios_list = [1.0]
                     set_setting('collage_mode.placement_ratios', ratios_list)
                 except ValueError: st.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
        with st.expander("–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫–æ–ª–ª–∞–∂–∞##coll", expanded=True):
            st.caption("–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫–æ–ª–ª–∞–∂–∞ (W:H, 0=–≤—ã–∫–ª)")
            cols_ratio_coll = st.columns(2)
            current_ratio_coll = get_setting('collage_mode.force_collage_aspect_ratio', None)
            default_w_coll = float(current_ratio_coll[0]) if current_ratio_coll else 0.0; default_h_coll = float(current_ratio_coll[1]) if current_ratio_coll else 0.0
            ratio_w_coll = cols_ratio_coll[0].number_input("W##coll_ratio", 0.0, value=default_w_coll, step=0.1, key='coll_ratio_w', label_visibility="collapsed") #, disabled=disable_coll))
            ratio_h_coll = cols_ratio_coll[1].number_input("H##coll_ratio", 0.0, value=default_h_coll, step=0.1, key='coll_ratio_h', label_visibility="collapsed") #, disabled=disable_coll))
            if ratio_w_coll > 0 and ratio_h_coll > 0: set_setting('collage_mode.force_collage_aspect_ratio', [ratio_w_coll, ratio_h_coll])
            else: set_setting('collage_mode.force_collage_aspect_ratio', None)
            st.caption("–ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä –∫–æ–ª–ª–∞–∂–∞ (–®x–í, 0=–≤—ã–∫–ª)")
            cols_max_dims_coll = st.columns(2)
            set_setting('collage_mode.max_collage_width', cols_max_dims_coll[0].number_input("–®##coll_max", 0, value=get_setting('collage_mode.max_collage_width', 1500), step=50, key='coll_max_w', label_visibility="collapsed")) #, disabled=disable_coll))
            set_setting('collage_mode.max_collage_height', cols_max_dims_coll[1].number_input("–í##coll_max", 0, value=get_setting('collage_mode.max_collage_height', 1500), step=50, key='coll_max_h', label_visibility="collapsed")) #, disabled=disable_coll))
            st.caption("–¢–æ—á–Ω—ã–π —Ö–æ–ª—Å—Ç –∫–æ–ª–ª–∞–∂–∞ (–®x–í, 0=–≤—ã–∫–ª)")
            cols_exact_dims_coll = st.columns(2)
            set_setting('collage_mode.final_collage_exact_width', cols_exact_dims_coll[0].number_input("–®##coll_exact", 0, value=get_setting('collage_mode.final_collage_exact_width', 0), step=50, key='coll_exact_w', label_visibility="collapsed")) #, disabled=disable_coll))
            set_setting('collage_mode.final_collage_exact_height', cols_exact_dims_coll[1].number_input("–í##coll_exact", 0, value=get_setting('collage_mode.final_collage_exact_height', 0), step=50, key='coll_exact_h', label_visibility="collapsed")) #, disabled=disable_coll))
        with st.expander("–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ –∫–æ–ª–ª–∞–∂–∞##coll", expanded=True):
            coll_format = st.selectbox("–§–æ—Ä–º–∞—Ç:##coll", ('jpg', 'png'), index=0 if get_setting('collage_mode.output_format', 'jpg') == 'jpg' else 1, key='coll_output_format') #, disabled=disable_coll))
            set_setting('collage_mode.output_format', coll_format)
            if coll_format == 'jpg': set_setting('collage_mode.jpeg_quality', st.slider("–ö–∞—á–µ—Å—Ç–≤–æ JPG:##coll", 1, 100, value=get_setting('collage_mode.jpeg_quality', 95), step=1, key='coll_jpeg_quality')) #, disabled=disable_coll))

    # --- –ö–Ω–æ–ø–∫–∏ –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ù–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ ---
    st.divider()
    st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
    cols_buttons = st.columns(2)
    if cols_buttons[0].button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", key='save_settings_btn', use_container_width=True, help="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª settings.json"):
        save_successful = config_manager.save_settings(st.session_state.current_settings, CONFIG_FILE)
        if save_successful: st.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        else: st.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
        time.sleep(1); st.rerun()
    if cols_buttons[1].button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å", key='reset_settings_btn', use_container_width=True, help="–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"):
        st.session_state.current_settings = config_manager.get_default_settings()
        log.info("Settings reset to defaults.")
        st.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã!")
        time.sleep(1); st.rerun()

# === –ò–ó–í–õ–ï–ö–ê–ï–ú –ó–ù–ê–ß–ï–ù–ò–ï –†–ï–ñ–ò–ú–ê –ü–û–°–õ–ï –û–¢–†–ò–°–û–í–ö–ò –°–ê–ô–î–ë–ê–†–ê ===
# –≠—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
processing_mode = st.session_state.processing_mode_selector_widget
log.debug(f"Processing mode determined for main area: {processing_mode}")


# === –û–°–ù–û–í–ù–ê–Ø –û–ë–õ–ê–°–¢–¨ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===
# ... (–ö–æ–ª–æ–Ω–∫–∏ col1, col2) ...
# ... (–ö–Ω–æ–ø–∫–∞ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å on_click=trigger_processing) ...
# ... (–û–±–ª–∞—Å—Ç—å –ª–æ–≥–æ–≤ —Å st.text_area) ...
# ... (–õ–æ–≥–∏–∫–∞ –ó–∞–ø—É—Å–∫–∞ if st.session_state.get('run_processing_flag', False):) ...
# ... (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–ª–∞–∂–∞) ...
# ... (log.debug("--- End of app script render cycle ---")) ...

# === –û–°–ù–û–í–ù–ê–Ø –û–ë–õ–ê–°–¢–¨ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===
st.divider()
col1, col2 = st.columns([3, 1])

with col2:
     st.caption(f"–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º: {processing_mode}") # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–∑ —Å–∞–π–¥–±–∞—Ä–∞

with col1:
    # --- –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ ---
    # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –≤–µ—Ä–Ω–µ—Ç True –¢–û–õ–¨–ö–û –≤ —Ç–æ–º —Ä–µ–Ω–¥–µ—Ä–µ, –∫–æ–≥–¥–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞
    if st.button(f"üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å: {processing_mode}", type="primary", key='start_button_actual_key', use_container_width=True): # –ù–æ–≤—ã–π –∫–ª—é—á
        start_button_pressed_this_run = True # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –≠–¢–û–ì–û —Ä–µ–Ω–¥–µ—Ä–∞
        log.info(f"--- Button '{processing_mode}' clicked! ---") # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ

st.divider()
# --- –û–±–ª–∞—Å—Ç—å –¥–ª—è –õ–æ–≥–æ–≤ ---
st.subheader("–õ–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ª–æ–≥", expanded=True):
    # –ü—Ä–æ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞
    st.text_area("–õ–æ–≥:", value=log_stream.getvalue(), height=400, key='log_output_display_area', disabled=True, label_visibility="collapsed")

# --- –õ–æ–≥–∏–∫–∞ –ó–∞–ø—É—Å–∫–∞ (–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –≤ —ç—Ç–æ–º —Ä–µ–Ω–¥–µ—Ä–µ) ---
if start_button_pressed_this_run:
    log.info(f"--- Start button was pressed this run. Starting validation... ---")
    # –û—á–∏—â–∞–µ–º –ª–æ–≥ –ü–ï–†–ï–î –∑–∞–ø—É—Å–∫–æ–º (–ø—Ä–µ–¥—ã–¥—É—â–∏–π —É–∂–µ –æ—Ç–æ–±—Ä–∞–∑–∏–ª—Å—è)
    log_stream.seek(0)
    log_stream.truncate(0)
    log.info(f"--- Log cleared. Validating paths for mode '{processing_mode}' ---") # –ù–æ–≤–æ–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    # --- –ü–†–û–í–ï–†–ö–ê –ü–£–¢–ï–ô ---
    paths_ok = True
    validation_errors = []
    input_path = get_setting('paths.input_folder_path', '')
    abs_input_path = os.path.abspath(input_path) if input_path else ''
    if not input_path or not os.path.isdir(abs_input_path):
        validation_errors.append(f"–ü–∞–ø–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞: '{input_path}'")
        paths_ok = False

    if processing_mode == "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤":
        output_path_ind = get_setting('paths.output_folder_path', '')
        abs_output_path_ind = os.path.abspath(output_path_ind) if output_path_ind else ''
        if not output_path_ind: validation_errors.append("–ù–µ —É–∫–∞–∑–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!"); paths_ok = False
        if paths_ok and get_setting('individual_mode.delete_originals') and input_path and output_path_ind and os.path.normcase(abs_input_path) == os.path.normcase(abs_output_path_ind):
             st.warning("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤ –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (–ø–∞–ø–∫–∞ –≤–≤–æ–¥–∞ –∏ –≤—ã–≤–æ–¥–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç).", icon="‚ö†Ô∏è")
             log.warning("Original deletion will be skipped (paths are same).")

    elif processing_mode == "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–∞–∂–∞":
        output_filename_coll = get_setting('paths.output_filename', '')
        if not output_filename_coll: validation_errors.append("–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–ª–∞–∂–∞!"); paths_ok = False
        elif input_path and paths_ok:
             full_coll_path = os.path.join(abs_input_path, output_filename_coll)
             if os.path.isdir(full_coll_path): validation_errors.append(f"–ò–º—è —Ñ–∞–π–ª–∞ –∫–æ–ª–ª–∞–∂–∞ '{output_filename_coll}' —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–∞–ø–∫—É!"); paths_ok = False

    # --- –ó–ê–ü–£–°–ö –∏–ª–∏ –í–´–í–û–î –û–®–ò–ë–û–ö ---
    if not paths_ok:
        log.warning("--- Path validation FAILED. Processing aborted. ---")
        for error_msg in validation_errors:
            st.error(error_msg, icon="‚ùå")
            log.error(f"Validation Error: {error_msg}")
        st.warning("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—É—Ç–µ–π.", icon="‚ö†Ô∏è")
        # –í–ê–ñ–ù–û: –ù–ï –≤—ã–∑—ã–≤–∞–µ–º rerun –∑–¥–µ—Å—å, –æ—à–∏–±–∫–∏ –∏ –ª–æ–≥ —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã
    else:
        # –ü—É—Ç–∏ –≤ –ø–æ—Ä—è–¥–∫–µ, –ó–ê–ü–£–°–ö–ê–ï–ú –æ–±—Ä–∞–±–æ—Ç–∫—É
        log.info(f"--- Path validation successful. Starting processing workflow... ---")
        # –í–ê–ñ–ù–û: –ù–ï –≤—ã–∑—ã–≤–∞–µ–º rerun –∑–¥–µ—Å—å

        with st.spinner(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ —Ä–µ–∂–∏–º–µ '{processing_mode}'... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."):
            try:
                current_run_settings = st.session_state.current_settings.copy()
                log.debug(f"Passing settings to workflow: {current_run_settings}")

                if processing_mode == "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤":
                    processing_workflows.run_individual_processing(**current_run_settings)
                elif processing_mode == "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–∞–∂–∞":
                    processing_workflows.run_collage_processing(**current_run_settings)

                log.info("--- Processing workflow finished successfully. ---")
                st.success("–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", icon="‚úÖ")

            except Exception as e:
                log.critical(f"!!! WORKFLOW EXECUTION FAILED: {e}", exc_info=True)
                st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}", icon="üî•")
            # finally: # –ë–ª–æ–∫ finally –Ω–µ –Ω—É–∂–µ–Ω, –µ—Å–ª–∏ –Ω–µ—Ç rerun
            #     pass

        # –í–ê–ñ–ù–û: –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è spinner –∏ try/except, —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ—Å—Ç–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è.
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–∏–∑–æ–π–¥—É—Ç –ø—Ä–∏ –°–õ–ï–î–£–Æ–©–ï–ú —Ä–µ–Ω–¥–µ—Ä–µ (–ª—é–±–æ–º –¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).
        # –ß—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥ –°–†–ê–ó–£ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –ù–£–ñ–ï–ù rerun.
        # –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞ - —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É:
        # st.rerun()
        log.info("--- Processing block finished. UI update will happen on next interaction or rerun. ---")


# --- –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–ª–∞–∂–∞ ---
if processing_mode == "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–∞–∂–∞":
    # ... (–∫–æ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–ª–∞–∂–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    coll_input_path = get_setting('paths.input_folder_path','')
    coll_filename = get_setting('paths.output_filename','')
    if coll_input_path and coll_filename and os.path.isdir(coll_input_path):
        coll_full_path = os.path.join(coll_input_path, coll_filename)
        if os.path.isfile(coll_full_path):
            st.divider(); st.subheader("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–ª–ª–∞–∂–∞:")
            try:
                preview_key = f"collage_preview_{int(os.path.getmtime(coll_full_path))}"
                st.image(coll_full_path, use_container_width=True, key=preview_key)
            except Exception as img_e: st.warning(f"... {img_e}"); log.warning(f"... {img_e}")


log.debug("--- End of app script render cycle ---")