# app.py

# –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–≤–æ–¥–∏—Ç—å –ª–æ–≥–∏

# --- –ë–õ–û–ö –ü–†–û–í–ï–†–ö–ò –ò –£–°–¢–ê–ù–û–í–ö–ò –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô ---
import sys
import subprocess
import importlib
import os
import time

print("="*50); print("--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ ---"); #... (–≤–µ—Å—å –±–ª–æ–∫)
# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è installed_packages_info ---
installed_packages_info = []
for package_name in ["streamlit", "Pillow", "natsort"]:
    module_map = { "streamlit": "streamlit", "Pillow": "PIL", "natsort": "natsort" }
    module_name = module_map[package_name]
    try: importlib.import_module(module_name); print(f"[OK] {package_name} found."); installed_packages_info.append(f"{package_name} (OK)")
    except ImportError: print(f"[!] {package_name} not found. Installing..."); # ... (–∫–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏) ...; installed_packages_info.append(f"{package_name} (Installed/Error)")
print("="*50); print("--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---"); print("–°—Ç–∞—Ç—É—Å –ø–∞–∫–µ—Ç–æ–≤:", ", ".join(installed_packages_info)); print("="*50)
needs_restart = any("(Installed" in s for s in installed_packages_info) # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞
if needs_restart: print("\n[–í–ê–ñ–ù–û] –ë—ã–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏...")
# === –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –ü–†–û–í–ï–†–ö–ò ===

# === –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ ===
print("–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
try:
    import streamlit as st
    from PIL import Image
    from io import StringIO
    import logging
    from typing import Dict, Any, Optional, Tuple, List
    import os
    import platform
    import subprocess
    import tempfile
    import json

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤ –º–æ–¥—É–ª–µ–π
    module_paths = {
        "config_manager.py": os.path.exists("config_manager.py"),
        "processing_workflows.py": os.path.exists("processing_workflows.py"),
        "image_utils.py": os.path.exists("image_utils.py")
    }
    
    import config_manager
    
    import processing_workflows
    
    print("–ú–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
except ImportError as e: 
    print(f"\n[!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê] Import Error: {e}"); sys.exit(1)
except Exception as e: 
    print(f"\n[!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê] App Import Error: {e}"); import traceback; traceback.print_exc(); sys.exit(1)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
log_stream = StringIO()
log_level = logging.DEBUG # <-- –£–°–¢–ê–ù–û–í–ò–¢–ï DEBUG –î–õ–Ø –û–¢–õ–ê–î–ö–ò
logging.basicConfig(stream=log_stream, level=log_level, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s', datefmt='%H:%M:%S')
log = logging.getLogger(__name__)
log.info("--- App script started, logger configured. ---") # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
log.info(f"Logging configured at level: {logging.getLevelName(log_level)}")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit ---
st.set_page_config(layout="wide", page_title="–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def get_downloads_folder():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°"""
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return r"C:\Users\zakhar\Downloads"
    
    # –ö–æ–¥ –Ω–∏–∂–µ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω, —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å
    """
    if platform.system() == "Windows":
        # –î–ª—è Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è USERPROFILE
        user_profile = os.environ.get("USERPROFILE")
        if user_profile:
            downloads_path = os.path.join(user_profile, "Downloads")
            if os.path.exists(downloads_path):
                return downloads_path
    
    # –î–ª—è –¥—Ä—É–≥–∏—Ö –û–° –∏–ª–∏ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–∞–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
    return os.path.expanduser("~")
    """

# === –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Streamlit ===

# --- –ó–∞–≥—Ä—É–∑–∫–∞/–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ù–∞—Å—Ç—Ä–æ–µ–∫ ---
CONFIG_FILE = "settings.json"
log.debug(f"Loading settings from {CONFIG_FILE}")
settings = config_manager.load_settings(CONFIG_FILE)

# –°–æ–∑–¥–∞–µ–º –Ω–∞–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
config_manager.create_default_preset()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ session_state –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
if 'current_settings' not in st.session_state:
    log.debug("Initializing current_settings in session_state.")
    st.session_state.current_settings = settings.copy()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    if 'paths' not in st.session_state.current_settings:
        st.session_state.current_settings['paths'] = {}
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not st.session_state.current_settings['paths'].get('input_folder_path'):
        st.session_state.current_settings['paths']['input_folder_path'] = r"C:\Users\zakhar\Downloads"
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if not st.session_state.current_settings['paths'].get('output_folder_path'):
        st.session_state.current_settings['paths']['output_folder_path'] = r"C:\Users\zakhar\Downloads\out"
    
    if not st.session_state.current_settings['paths'].get('backup_folder_path'):
        st.session_state.current_settings['paths']['backup_folder_path'] = r"C:\Users\zakhar\Downloads\backup"
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∫–æ–ª–ª–∞–∂–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not st.session_state.current_settings['paths'].get('output_filename'):
        st.session_state.current_settings['paths']['output_filename'] = "collage.jpg"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    config_manager.save_settings(st.session_state.current_settings, CONFIG_FILE)
    log.debug("Default paths initialized and saved.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
if 'settings_changed' not in st.session_state:
    st.session_state.settings_changed = False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –Ω–∞–±–æ—Ä
if 'active_preset' not in st.session_state:
    st.session_state.active_preset = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_setting(key_path: str, default: Any = None) -> Any:
    keys = key_path.split('.')
    value = st.session_state.current_settings
    try:
        for key in keys: value = value[key]
        if isinstance(value, (list, dict)): return value.copy()
        return value
    except (KeyError, TypeError):
        if isinstance(default, (list, dict)): return default.copy()
        return default

def set_setting(key_path: str, value: Any):
    keys = key_path.split('.')
    d = st.session_state.current_settings
    try:
        for key in keys[:-1]:
            if key not in d or not isinstance(d[key], dict): d[key] = {}
            d = d[key]
        d[keys[-1]] = value.copy() if isinstance(value, (list, dict)) else value
        st.session_state.settings_changed = True  # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
    except TypeError as e: log.error(f"Error setting '{key_path}': {e}")

# === –û–°–ù–û–í–ù–ê–Ø –û–ë–õ–ê–°–¢–¨ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===
# --- UI: –ë–æ–∫–æ–≤–∞—è –ü–∞–Ω–µ–ª—å ---
with st.sidebar:
    # === –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã ===
    st.header("üéØ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if "saved_processing_mode" in st.session_state:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞
        initial_mode = st.session_state.saved_processing_mode
        # –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ
        del st.session_state.saved_processing_mode
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        initial_mode = st.session_state.get("processing_mode_selector_widget", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")

    # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
    processing_mode = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
        ["–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤", "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–∞–∂–µ–π"],
        key="processing_mode_selector_widget",
        index=0 if initial_mode == "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤" else 1
    )
    st.caption("–†–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    st.divider()

    # === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–±–æ—Ä–∞–º–∏ ===
    st.header("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–±–æ—Ä–∞–º–∏")
    available_presets = config_manager.get_available_presets()
    if not available_presets:
        available_presets = ["–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"]
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞
    def get_default_preset_name():
        existing_presets = config_manager.get_available_presets()
        counter = 1
        while f"–ù–∞–±–æ—Ä {counter}" in existing_presets:
            counter += 1
        return f"–ù–∞–±–æ—Ä {counter}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ—Å–µ—Ç–∞ –∏ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    preset_col1, preset_col2 = st.columns([4, 1])
    with preset_col1:
        selected_preset = st.selectbox("–ê–∫—Ç–∏–≤–Ω—ã–π –Ω–∞–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫", available_presets, 
                                      index=available_presets.index(st.session_state.active_preset) if st.session_state.active_preset in available_presets else 0,
                                      key="preset_selector")
    with preset_col2:
        st.write("") # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
        can_delete = selected_preset != "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
        if can_delete:
            if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key="delete_preset_button", help=f"–£–¥–∞–ª–∏—Ç—å –Ω–∞–±–æ—Ä '{selected_preset}'"):
                if config_manager.delete_settings_preset(selected_preset):
                    if st.session_state.active_preset == selected_preset:
                        st.session_state.active_preset = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
                        default_settings = config_manager.load_settings_preset("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                        if default_settings:
                            st.session_state.current_settings = default_settings
                    st.success(f"–ù–∞–±–æ—Ä '{selected_preset}' —É–¥–∞–ª–µ–Ω")
                    st.rerun()
                else:
                    st.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–±–æ—Ä–∞")
        else:
            st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key="delete_preset_button_disabled", disabled=True, 
                     help="–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –Ω–∞–±–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    st.caption("–ê–∫—Ç–∏–≤–Ω—ã–π –Ω–∞–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ —Å–º–µ–Ω–µ –Ω–∞–±–æ—Ä–∞
    if selected_preset != st.session_state.active_preset:
        preset_settings = config_manager.load_settings_preset(selected_preset)
        if preset_settings:
            st.session_state.current_settings = preset_settings
            st.session_state.active_preset = selected_preset
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞
            if "processing_mode_selector" in preset_settings:
                st.session_state.saved_processing_mode = preset_settings["processing_mode_selector"]
            st.session_state.settings_changed = True
            st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω –Ω–∞–±–æ—Ä '{selected_preset}'")
            st.rerun()
        else:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–±–æ—Ä–∞ '{selected_preset}'")
    
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞
    rename_col1, rename_col2 = st.columns([4, 1]) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 4:1, –∫–∞–∫ —É selectbox'–∞ –∏ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    with rename_col1:
        new_name = st.text_input("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –Ω–∞–±–æ—Ä:", 
                                value=selected_preset, 
                                key="rename_preset",
                                disabled=selected_preset == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    with rename_col2:
        st.write("") # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
        if st.button("‚úèÔ∏è –ü–µ—Ä–µ–∏–º.", 
                    disabled=selected_preset == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                    help="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π –Ω–∞–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫"):
            if config_manager.rename_settings_preset(selected_preset, new_name):
                st.session_state.active_preset = new_name
                st.success(f"–ù–∞–±–æ—Ä –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ '{new_name}'")
                st.rerun()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞
    create_col1, create_col2 = st.columns([4, 1]) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 4:1
    with create_col1:
        default_name = get_default_preset_name()
        new_preset_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞:", 
                                       key="new_preset_name",
                                       placeholder=default_name)
    with create_col2:
        st.write("") # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
        if st.button("‚ûï –°–æ–∑–¥–∞—Ç—å", 
                    help="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫"):
            # –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            preset_name = new_preset_name if new_preset_name else default_name
            if config_manager.save_settings_preset(st.session_state.current_settings, preset_name):
                st.session_state.active_preset = preset_name
                st.success(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä '{preset_name}'")
                st.rerun()
            else:
                st.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–±–æ—Ä–∞")
    
    st.divider()

    # === –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞: –°–±—Ä–æ—Å –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π ===
    if 'reset_profiles_confirmation_pending' not in st.session_state:
        st.session_state.reset_profiles_confirmation_pending = False

    if st.button("üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏", key="reset_all_profiles_button", help="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞–±–æ—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫", disabled=st.session_state.reset_profiles_confirmation_pending):
        st.warning("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫? –û—Å—Ç–∞–Ω–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ñ–∏–ª—å '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.", icon="‚ö†Ô∏è")
        st.session_state.reset_profiles_confirmation_pending = True
        st.rerun()

    if st.session_state.reset_profiles_confirmation_pending:
        prof_confirm_col1, prof_confirm_col2 = st.columns(2)
        with prof_confirm_col1:
            if st.button("–î–∞, —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏", key="confirm_reset_profiles", type="primary"):
                try:
                    deleted_count = config_manager.delete_all_custom_presets()
                    if deleted_count is not None:
                         st.success(f"–£–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π: {deleted_count}. –ê–∫—Ç–∏–≤–Ω—ã–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'.")
                         # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–µ—Å–µ—Ç
                         default_settings = config_manager.load_settings_preset("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                         if default_settings:
                             st.session_state.current_settings = default_settings
                         st.session_state.active_preset = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
                         st.session_state.settings_changed = True # –û—Ç–º–µ—á–∞–µ–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                    else:
                         st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π.")
                    
                    st.session_state.reset_profiles_confirmation_pending = False
                    st.rerun()

                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π: {str(e)}")
                    st.session_state.reset_profiles_confirmation_pending = False
                    st.rerun()
        with prof_confirm_col2:
             if st.button("–û—Ç–º–µ–Ω–∞", key="cancel_reset_profiles"):
                st.info("–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –æ—Ç–º–µ–Ω–µ–Ω–æ.")
                st.session_state.reset_profiles_confirmation_pending = False
                st.rerun()

    st.divider()

    # === –ü—É—Ç–∏ ===
    st.header("üìÇ –ü—É—Ç–∏")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
    downloads_folder = get_downloads_folder()
    
    # --- –ü–∞–ø–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ ---
    st.write("–ü–∞–ø–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏:")
    input_path = st.text_input(
        "–ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω—ã–º —Ñ–∞–π–ª–∞–º",
        value=get_setting('paths.input_folder_path', ''),
        key='path_input_sidebar',
        placeholder=downloads_folder,
        label_visibility="collapsed"
    )
    set_setting('paths.input_folder_path', input_path)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏
    if input_path:
        abs_input_path = os.path.abspath(input_path)
        if os.path.isdir(abs_input_path):
            st.caption(f"‚úÖ –ü–∞–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: {abs_input_path}", unsafe_allow_html=True)
        else:
            st.caption(f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {abs_input_path}", unsafe_allow_html=True)
    else:
        st.caption("‚ÑπÔ∏è –ü—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω.", unsafe_allow_html=True)


    if processing_mode == "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤":
        # --- –ü–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
        st.write("–ü–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        output_path = st.text_input(
            "–ü—É—Ç—å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
            value=get_setting('paths.output_folder_path', ''),
            key='path_output_ind_sidebar',
            placeholder=os.path.join(downloads_folder, "out"),
            label_visibility="collapsed"
        )
        set_setting('paths.output_folder_path', output_path)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏
        if output_path:
            abs_output_path = os.path.abspath(output_path)
            # –î–ª—è –ø–∞–ø–∫–∏ –≤—ã–≤–æ–¥–∞ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ, 
            # –Ω–æ –º–æ–∂–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª
            if os.path.exists(abs_output_path) and not os.path.isdir(abs_output_path):
                 st.caption(f"‚ùå –£–∫–∞–∑–∞–Ω —Ñ–∞–π–ª, –∞ –Ω–µ –ø–∞–ø–∫–∞: {abs_output_path}", unsafe_allow_html=True)
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç, –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            else: # –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —ç—Ç–æ –ø–∞–ø–∫–∞
                 st.caption(f"‚ÑπÔ∏è –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {abs_output_path}", unsafe_allow_html=True)
        else:
            st.caption("‚ÑπÔ∏è –ü—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω.", unsafe_allow_html=True)
        
        # --- –ü–∞–ø–∫–∞ –¥–ª—è –±—ç–∫–∞–ø–æ–≤ ---
        st.write("–ü–∞–ø–∫–∞ –¥–ª—è –±—ç–∫–∞–ø–æ–≤ (–ø—É—Å—Ç–æ = –≤—ã–∫–ª):")
        backup_path = st.text_input(
            "–ü—É—Ç—å –¥–ª—è –±—ç–∫–∞–ø–æ–≤",
            value=get_setting('paths.backup_folder_path', ''),
            key='path_backup_ind_sidebar',
            placeholder=os.path.join(downloads_folder, "backup"),
            label_visibility="collapsed"
        )
        set_setting('paths.backup_folder_path', backup_path)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏
        if backup_path:
            abs_backup_path = os.path.abspath(backup_path)
            if os.path.exists(abs_backup_path) and not os.path.isdir(abs_backup_path):
                 st.caption(f"‚ùå –£–∫–∞–∑–∞–Ω —Ñ–∞–π–ª, –∞ –Ω–µ –ø–∞–ø–∫–∞: {abs_backup_path}", unsafe_allow_html=True)
            else:
                 st.caption(f"‚ÑπÔ∏è –ü—É—Ç—å –¥–ª—è –±—ç–∫–∞–ø–æ–≤: {abs_backup_path}", unsafe_allow_html=True)
        else:
            st.caption("‚ÑπÔ∏è –ë—ç–∫–∞–ø –æ—Ç–∫–ª—é—á–µ–Ω.", unsafe_allow_html=True)
            
    else: # –†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–∞–∂–∞
        # --- –ò–º—è —Ñ–∞–π–ª–∞ –∫–æ–ª–ª–∞–∂–∞ ---
        st.write("–ò–º—è —Ñ–∞–π–ª–∞ –∫–æ–ª–ª–∞–∂–∞ (–≤ –ø–∞–ø–∫–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞):")
        collage_filename = st.text_input(
            "–ò–º—è —Ñ–∞–π–ª–∞ –∫–æ–ª–ª–∞–∂–∞", 
            value=get_setting('paths.output_filename', 'collage.jpg'), 
            key='path_output_coll_sidebar',
            label_visibility="collapsed"
        )
        set_setting('paths.output_filename', collage_filename)
        if collage_filename:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–±–∞–∑–æ–≤–∞—è)
            if os.path.sep in collage_filename or collage_filename in (".", ".."):
                 st.caption(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞.", unsafe_allow_html=True)
            else:
                 st.caption(f"‚ÑπÔ∏è –ò–º—è —Ñ–∞–π–ª–∞: {collage_filename}", unsafe_allow_html=True)
        else:
             st.caption(f"‚ùå –ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ.", unsafe_allow_html=True)
    
    # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –ø—É—Ç–µ–π
    if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø—É—Ç–∏", key="reset_paths", help="–°–±—Ä–æ—Å–∏—Ç—å –ø—É—Ç–∏ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config_manager
        default_settings_full = config_manager.get_default_settings()
        if default_settings_full and "paths" in default_settings_full:
            default_paths = default_settings_full["paths"]
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø—É—Ç—å –∏–∑ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–∫ –¢–ï–ö–£–©–ï–ï –ó–ù–ê–ß–ï–ù–ò–ï
            set_setting('paths.input_folder_path', default_paths.get('input_folder_path', ''))
            set_setting('paths.output_folder_path', default_paths.get('output_folder_path', ''))
            set_setting('paths.backup_folder_path', default_paths.get('backup_folder_path', ''))
            set_setting('paths.output_filename', default_paths.get('output_filename', 'collage.jpg'))
            st.session_state.settings_changed = True # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            st.success("–ü—É—Ç–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!")
            st.rerun() # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ –ø–æ–ª—è—Ö
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—É—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ config_manager.")
    
    # === –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ ===
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if 'reset_confirmation_pending' not in st.session_state:
        st.session_state.reset_confirmation_pending = False

    if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –í–°–Å (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä–æ—Ñ–∏–ª–∏)", key="reset_all_settings", help="–°–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ò —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.", disabled=st.session_state.reset_confirmation_pending):
        st.warning("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –í–°–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É–¥–∞–ª–∏—Ç—å –í–°–ï –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.", icon="üî•")
        st.session_state.reset_confirmation_pending = True
        st.rerun()

    if st.session_state.reset_confirmation_pending:
        confirm_col1, confirm_col2 = st.columns(2)
        
        with confirm_col1:
            if st.button("–î–∞, —Å–±—Ä–æ—Å–∏—Ç—å –í–°–Å", key="confirm_reset", type="primary"):
                try:
                    # 1. –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏
                    deleted_count = config_manager.delete_all_custom_presets()
                    if deleted_count is None:
                         # –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Å–±—Ä–æ—Å
                         st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π. –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –ø—Ä–µ—Ä–≤–∞–Ω.")
                         st.session_state.reset_confirmation_pending = False
                         st.rerun()
                         # –í—ã—Ö–æ–¥ –∏–∑ –±–ª–æ–∫–∞ try, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
                         raise Exception("Profile deletion failed") 
                    
                    log.info(f"Deleted {deleted_count} custom presets during full reset.")

                    # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    default_settings = config_manager.load_settings_preset("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                    if default_settings:
                        # 3. –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        st.session_state.current_settings = default_settings.copy()
                        
                        # 4. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–µ—Å–µ—Ç –Ω–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
                        st.session_state.active_preset = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
                        
                        # 5. –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        st.session_state.processing_mode_selector_widget = "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"
                        st.session_state.saved_processing_mode = "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"
                        
                        # 6. –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å (–¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
                        st.session_state.settings_changed = True
                        
                        # 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫
                        if config_manager.save_settings(st.session_state.current_settings, CONFIG_FILE):
                            st.success("–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω! –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä–æ—Ñ–∏–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã.")
                        else:
                            st.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞.")
                    else:
                        st.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∞.")
                        
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
                    st.session_state.reset_confirmation_pending = False
                    st.rerun()

                except Exception as e:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —ç—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
                    if "Profile deletion failed" not in str(e):
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º —Å–±—Ä–æ—Å–µ: {str(e)}")
                    st.session_state.reset_confirmation_pending = False
                    st.rerun()
        
        with confirm_col2:
            if st.button("–û—Ç–º–µ–Ω–∞", key="cancel_reset"):
                st.info("–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω.")
                st.session_state.reset_confirmation_pending = False
                st.rerun()

    st.divider()

    # === –†–∞–∑–º–µ—Ä—ã ===
    st.header("üìè –†–∞–∑–º–µ—Ä—ã")
    
    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ—Å–∞–π–∑
    with st.expander("1. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ—Å–∞–π–∑", expanded=False):
        enable_preresize = st.checkbox("–í–∫–ª—é—á–∏—Ç—å", value=get_setting('preprocessing.enable_preresize', False), key='pre_enable')
        set_setting('preprocessing.enable_preresize', enable_preresize)
        if enable_preresize:
            set_setting('preprocessing.preresize_width', st.number_input("–ú–∞–∫—Å. –® (–ø–∏–∫—Å)", 0, value=get_setting('preprocessing.preresize_width', 2500), step=10, key='pre_w'))
            set_setting('preprocessing.preresize_height', st.number_input("–ú–∞–∫—Å. –í (–ø–∏–∫—Å)", 0, value=get_setting('preprocessing.preresize_height', 2500), step=10, key='pre_h'))
        else:
            set_setting('preprocessing.preresize_width', 0)
            set_setting('preprocessing.preresize_height', 0)
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    with st.expander("2. –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã", expanded=False):
        if processing_mode == "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤":
            st.caption("–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω (W:H, 0=–≤—ã–∫–ª)")
            current_ratio = get_setting('individual_mode.force_aspect_ratio', None)
            default_w = float(current_ratio[0]) if current_ratio else 0.0
            default_h = float(current_ratio[1]) if current_ratio else 0.0
            ratio_w = st.number_input("W", 0.0, value=default_w, step=0.1, key='ind_ratio_w')
            ratio_h = st.number_input("H", 0.0, value=default_h, step=0.1, key='ind_ratio_h')
            if ratio_w > 0 and ratio_h > 0:
                set_setting('individual_mode.force_aspect_ratio', [ratio_w, ratio_h])
            else:
                set_setting('individual_mode.force_aspect_ratio', None)
            
            st.caption("–ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä (–®x–í, 0=–≤—ã–∫–ª)")
            set_setting('individual_mode.max_output_width', st.number_input("–®", 0, value=get_setting('individual_mode.max_output_width', 1500), step=50, key='ind_max_w'))
            set_setting('individual_mode.max_output_height', st.number_input("–í", 0, value=get_setting('individual_mode.max_output_height', 1500), step=50, key='ind_max_h'))
            
            st.caption("–¢–æ—á–Ω—ã–π —Ö–æ–ª—Å—Ç (–®x–í, 0=–≤—ã–∫–ª)")
            set_setting('individual_mode.final_exact_width', st.number_input("–®", 0, value=get_setting('individual_mode.final_exact_width', 0), step=50, key='ind_exact_w'))
            set_setting('individual_mode.final_exact_height', st.number_input("–í", 0, value=get_setting('individual_mode.final_exact_height', 0), step=50, key='ind_exact_h'))
        else:
            st.caption("–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫–æ–ª–ª–∞–∂–∞ (W:H, 0=–≤—ã–∫–ª)")
            current_ratio = get_setting('collage_mode.force_collage_aspect_ratio', None)
            default_w = float(current_ratio[0]) if current_ratio else 0.0
            default_h = float(current_ratio[1]) if current_ratio else 0.0
            ratio_w = st.number_input("W", 0.0, value=default_w, step=0.1, key='coll_ratio_w')
            ratio_h = st.number_input("H", 0.0, value=default_h, step=0.1, key='coll_ratio_h')
            if ratio_w > 0 and ratio_h > 0:
                set_setting('collage_mode.force_collage_aspect_ratio', [ratio_w, ratio_h])
            else:
                set_setting('collage_mode.force_collage_aspect_ratio', None)
            
            st.caption("–ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä –∫–æ–ª–ª–∞–∂–∞ (–®x–í, 0=–≤—ã–∫–ª)")
            set_setting('collage_mode.max_collage_width', st.number_input("–®", 0, value=get_setting('collage_mode.max_collage_width', 1500), step=50, key='coll_max_w'))
            set_setting('collage_mode.max_collage_height', st.number_input("–í", 0, value=get_setting('collage_mode.max_collage_height', 1500), step=50, key='coll_max_h'))
            
            st.caption("–¢–æ—á–Ω—ã–π —Ö–æ–ª—Å—Ç –∫–æ–ª–ª–∞–∂–∞ (–®x–í, 0=–≤—ã–∫–ª)")
            set_setting('collage_mode.final_collage_exact_width', st.number_input("–®", 0, value=get_setting('collage_mode.final_collage_exact_width', 0), step=50, key='coll_exact_w'))
            set_setting('collage_mode.final_collage_exact_height', st.number_input("–í", 0, value=get_setting('collage_mode.final_collage_exact_height', 0), step=50, key='coll_exact_h'))
    
    st.divider()

    # === –Ø—Ä–∫–æ—Å—Ç—å –∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å ===
    st.header("‚ú® –Ø—Ä–∫–æ—Å—Ç—å –∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å")
    with st.expander("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è—Ä–∫–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏", expanded=False):
        enable_adjustments = st.checkbox("–í–∫–ª—é—á–∏—Ç—å", value=get_setting('image_adjustments.enable_adjustments', False), key='adj_enable')
        set_setting('image_adjustments.enable_adjustments', enable_adjustments)
        if enable_adjustments:
            set_setting('image_adjustments.brightness', st.slider("–Ø—Ä–∫–æ—Å—Ç—å", -100, 100, value=get_setting('image_adjustments.brightness', 0), key='adj_brightness'))
            set_setting('image_adjustments.contrast', st.slider("–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å", -100, 100, value=get_setting('image_adjustments.contrast', 0), key='adj_contrast'))
    
    st.divider()

    # === –§–æ–Ω –∏ –æ–±—Ä–µ–∑–∫–∞ ===
    st.header("üé® –§–æ–Ω –∏ –æ–±—Ä–µ–∑–∫–∞")
    with st.expander("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ–Ω–∞ –∏ –æ–±—Ä–µ–∑–∫–∏", expanded=False):
        enable_bg_crop = st.checkbox("–í–∫–ª—é—á–∏—Ç—å", value=get_setting('background_crop.enable_bg_crop', False), key='bgc_enable')
        set_setting('background_crop.enable_bg_crop', enable_bg_crop)
        if enable_bg_crop:
            set_setting('background_crop.white_tolerance', st.slider("–î–æ–ø—É—Å–∫ –±–µ–ª–æ–≥–æ —Ñ–æ–Ω–∞", 0, 255, value=get_setting('background_crop.white_tolerance', 0), key='bgc_tol'))
            check_perimeter = st.checkbox("–ü—Ä–æ–≤–µ—Ä—è—Ç—å –ø–µ—Ä–∏–º–µ—Ç—Ä", value=get_setting('background_crop.check_perimeter', True), key='bgc_perimeter')
            set_setting('background_crop.check_perimeter', check_perimeter)
            crop_abs = st.checkbox("–ê–±—Å–æ–ª—é—Ç–Ω–æ —Å–∏–º–º. –æ–±—Ä–µ–∑–∫–∞", value=get_setting('background_crop.crop_symmetric_absolute', False), key='bgc_abs')
            set_setting('background_crop.crop_symmetric_absolute', crop_abs)
            if not crop_abs:
                crop_axes = st.checkbox("–°–∏–º–º. –æ–±—Ä–µ–∑–∫–∞ –ø–æ –æ—Å—è–º", value=get_setting('background_crop.crop_symmetric_axes', False), key='bgc_axes')
                set_setting('background_crop.crop_symmetric_axes', crop_axes)
            else:
                set_setting('background_crop.crop_symmetric_axes', False)
        else:
            set_setting('background_crop.white_tolerance', 0)
            set_setting('background_crop.check_perimeter', True)
            set_setting('background_crop.crop_symmetric_absolute', False)
            set_setting('background_crop.crop_symmetric_axes', False)
    
    st.divider()

    # === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π ===
    st.header("üìê –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π")
    with st.expander("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª–µ–π", expanded=False):
        enable_padding = st.checkbox("–í–∫–ª—é—á–∏—Ç—å", value=get_setting('padding.enable_padding', False), key='pad_enable')
        set_setting('padding.enable_padding', enable_padding)
        if enable_padding:
            set_setting('padding.padding_percent', st.slider("–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª–µ–π (%)", 0.0, 50.0, value=get_setting('padding.padding_percent', 5.0), step=0.5, key='pad_perc'))
            set_setting('padding.perimeter_margin', st.number_input("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–∏–º–µ—Ç—Ä–∞ (–ø–∏–∫—Å, 0=–≤—ã–∫–ª)", 0, value=get_setting('padding.perimeter_margin', 0), step=1, key='pad_margin'))
            set_setting('padding.allow_expansion', st.checkbox("–†–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–ª—è–º —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä?", value=get_setting('padding.allow_expansion', True), key='pad_expand'))
        else:
            set_setting('padding.padding_percent', 0.0)
            set_setting('padding.perimeter_margin', 0)
            set_setting('padding.allow_expansion', False)

    # === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤" ===
    if processing_mode == "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤":
        st.header("‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤")
        with st.expander("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–≤–æ–¥–∞ –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è", expanded=True):
            # –ê—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
            set_setting('individual_mode.article_name', 
                         st.text_input("–ê—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è (–ø—É—Å—Ç–æ=–≤—ã–∫–ª)", 
                                       value=get_setting('individual_mode.article_name', ''), 
                                       key='ind_article'))
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤
            set_setting('individual_mode.delete_originals', 
                         st.checkbox("–£–¥–∞–ª—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—ã –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏?", 
                                     value=get_setting('individual_mode.delete_originals', False), 
                                     key='ind_delete_orig'))
            st.warning("–í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤ —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é!", icon="‚ö†Ô∏è")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–≤–æ–¥–∞ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            st.caption("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–≤–æ–¥–∞ (–æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã)")
            output_format_ind = st.selectbox("–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞", 
                                             options=["jpg", "png"],
                                             index=["jpg", "png"].index(get_setting('individual_mode.output_format', 'jpg')),
                                             key='ind_format')
            set_setting('individual_mode.output_format', output_format_ind)
            
            if output_format_ind == 'jpg':
                set_setting('individual_mode.jpeg_quality', 
                             st.slider("–ö–∞—á–µ—Å—Ç–≤–æ JPG", 
                                       min_value=1, 
                                       max_value=100, 
                                       value=get_setting('individual_mode.jpeg_quality', 95), 
                                       key='ind_quality'))
                bg_color_str_ind = ",".join(map(str, get_setting('individual_mode.jpg_background_color', [255,255,255])))
                new_bg_color_str_ind = st.text_input("–§–æ–Ω JPG (R,G,B)", value=bg_color_str_ind, key='ind_bg')
                try:
                    new_bg_color_ind = list(map(int, new_bg_color_str_ind.split(',')))
                    if len(new_bg_color_ind) == 3 and all(0 <= c <= 255 for c in new_bg_color_ind):
                        set_setting('individual_mode.jpg_background_color', new_bg_color_ind)
                    else:
                        st.caption("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–≤–µ—Ç–∞ (–Ω—É–∂–Ω–æ R,G,B)")
                except ValueError:
                     st.caption("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–≤–µ—Ç–∞ (–Ω—É–∂–Ω–æ R,G,B)")
        st.divider()

    
    # === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–ª–∞–∂–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∂–∏–º–∞ –∫–æ–ª–ª–∞–∂–∞) ===
    if processing_mode == "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–∞–∂–µ–π":
        st.header("üñºÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–ª–∞–∂–∞")
        with st.expander("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–≤–æ–¥–∞ –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è", expanded=True):
            # –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
            output_format_coll = st.selectbox("–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞", 
                                             options=["jpg", "png"],
                                             index=["jpg", "png"].index(get_setting('collage_mode.output_format', 'jpg')),
                                             key='coll_format')
            set_setting('collage_mode.output_format', output_format_coll)
            
            if output_format_coll == 'jpg':
                set_setting('collage_mode.jpeg_quality', 
                             st.slider("–ö–∞—á–µ—Å—Ç–≤–æ JPG", 
                                       min_value=1, 
                                       max_value=100, 
                                       value=get_setting('collage_mode.jpeg_quality', 95), 
                                       key='coll_quality'))
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_setting –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞ –∫–æ–ª–ª–∞–∂–∞
                bg_color_str_coll = ",".join(map(str, get_setting('collage_mode.jpg_background_color', [255,255,255])))
                new_bg_color_str_coll = st.text_input("–§–æ–Ω JPG –∫–æ–ª–ª–∞–∂–∞ (R,G,B)", value=bg_color_str_coll, key='coll_bg') # –†–∞–∑–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
                try:
                    new_bg_color_coll = list(map(int, new_bg_color_str_coll.split(',')))
                    if len(new_bg_color_coll) == 3 and all(0 <= c <= 255 for c in new_bg_color_coll):
                        set_setting('collage_mode.jpg_background_color', new_bg_color_coll)
                    else:
                        st.caption("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–≤–µ—Ç–∞ (–Ω—É–∂–Ω–æ R,G,B)")
                except ValueError:
                     st.caption("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–≤–µ—Ç–∞ (–Ω—É–∂–Ω–æ R,G,B)")
            
        st.divider()

# === –û–°–ù–û–í–ù–ê–Ø –û–ë–õ–ê–°–¢–¨ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===
# --- UI ---
st.title("üñºÔ∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –û–±—Ä–∞–±–æ—Ç–∫–∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
st.markdown("–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–∞–∂–µ–π.")
st.divider()

# === –ò–ó–í–õ–ï–ö–ê–ï–ú –ó–ù–ê–ß–ï–ù–ò–ï –†–ï–ñ–ò–ú–ê –ü–û–°–õ–ï –û–¢–†–ò–°–û–í–ö–ò –°–ê–ô–î–ë–ê–†–ê ===
# –≠—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
if "processing_mode_selector_widget" not in st.session_state:
    st.session_state.processing_mode_selector_widget = "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
if "saved_processing_mode" in st.session_state:
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞
    st.session_state.processing_mode_selector_widget = st.session_state.saved_processing_mode
    # –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ
    del st.session_state.saved_processing_mode

processing_mode = st.session_state.processing_mode_selector_widget
log.debug(f"Processing mode determined for main area: {processing_mode}")

# === –û–°–ù–û–í–ù–ê–Ø –û–ë–õ–ê–°–¢–¨ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===
st.divider()
col1, col2 = st.columns([3, 1])

with col2:
     st.caption(f"–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º: {processing_mode}") # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–∑ —Å–∞–π–¥–±–∞—Ä–∞

with col1:
    # --- –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ ---
    # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –≤–µ—Ä–Ω–µ—Ç True –¢–û–õ–¨–ö–û –≤ —Ç–æ–º —Ä–µ–Ω–¥–µ—Ä–µ, –∫–æ–≥–¥–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞
    if st.button(f"üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å: {processing_mode}", type="primary", key='start_button_actual_key', use_container_width=True): # –ù–æ–≤—ã–π –∫–ª—é—á
        log.info(f"--- Button '{processing_mode}' CLICKED! Attempting to start processing logic. ---")
        print(f"--- APP.PY PRINT: Button '{processing_mode}' CLICKED! ---")

        # === –î–û–ë–ê–í–õ–ï–ù–û –î–õ–Ø –û–¢–õ–ê–î–ö–ò ===
        # st.info("–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—É—Ç–µ–π...", icon="‚è≥")
        # ==============================

        # --- –õ–æ–≥–∏–∫–∞ –ó–∞–ø—É—Å–∫–∞ (—Ç–µ–ø–µ—Ä—å –í–ù–£–¢–†–ò if st.button) ---
        log.info(f"--- Starting validation... ---")
        # –û—á–∏—â–∞–µ–º –ª–æ–≥ –ü–ï–†–ï–î –∑–∞–ø—É—Å–∫–æ–º
        log_stream.seek(0)
        log_stream.truncate(0)
        log.info(f"--- Log cleared. Validating paths for mode '{processing_mode}' ---")

        # --- –ü–†–û–í–ï–†–ö–ê –ü–£–¢–ï–ô ---
        paths_ok = True
        validation_errors = []
        input_path = get_setting('paths.input_folder_path', '')
        abs_input_path = os.path.abspath(input_path) if input_path else ''
        if not input_path or not os.path.isdir(abs_input_path):
            validation_errors.append(f"–ü–∞–ø–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞: '{input_path}'")
            paths_ok = False

        if processing_mode == "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤":
            output_path_ind = get_setting('paths.output_folder_path', '')
            abs_output_path_ind = os.path.abspath(output_path_ind) if output_path_ind else ''
            if not output_path_ind: validation_errors.append("–ù–µ —É–∫–∞–∑–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!"); paths_ok = False
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø—É—Ç–µ–π –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
            safe_to_delete_check = True
            if get_setting('individual_mode.delete_originals', False):
                 if not input_path or not output_path_ind or os.path.normcase(abs_input_path) == os.path.normcase(abs_output_path_ind):
                      safe_to_delete_check = False
                      st.warning("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤ –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (–ø–∞–ø–∫–∞ –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∏–ª–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç).", icon="‚ö†Ô∏è")
                      log.warning("Original deletion will be skipped (paths invalid or same).")

        elif processing_mode == "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–∞–∂–∞":
            output_filename_coll = get_setting('paths.output_filename', '')
            if not output_filename_coll: validation_errors.append("–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–ª–∞–∂–∞!"); paths_ok = False
            elif input_path and paths_ok: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ input_path –≤–∞–ª–∏–¥–Ω–∞
                 full_coll_path = os.path.join(abs_input_path, output_filename_coll)
                 if os.path.isdir(full_coll_path): validation_errors.append(f"–ò–º—è —Ñ–∞–π–ª–∞ –∫–æ–ª–ª–∞–∂–∞ '{output_filename_coll}' —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–∞–ø–∫—É!"); paths_ok = False

        # --- –ó–ê–ü–£–°–ö –∏–ª–∏ –í–´–í–û–î –û–®–ò–ë–û–ö --- 
        if not paths_ok:
            log.warning("--- Path validation FAILED. Processing aborted. ---")
            for error_msg in validation_errors:
                st.error(error_msg, icon="‚ùå")
                log.error(f"Validation Error: {error_msg}")
            st.warning("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—É—Ç–µ–π.", icon="‚ö†Ô∏è")
        else:
            # === –î–û–ë–ê–í–õ–ï–ù–û –î–õ–Ø –û–¢–õ–ê–î–ö–ò ===
            # st.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π –ø—Ä–æ–π–¥–µ–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...", icon="‚úÖ")
            # ==============================

            # –ü—É—Ç–∏ –≤ –ø–æ—Ä—è–¥–∫–µ, –ó–ê–ü–£–°–ö–ê–ï–ú –æ–±—Ä–∞–±–æ—Ç–∫—É
            log.info(f"--- Path validation successful. Starting processing workflow... ---")
            
            with st.spinner(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ —Ä–µ–∂–∏–º–µ '{processing_mode}'... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."):
                 try:
                     current_run_settings = st.session_state.current_settings.copy()
                     log.debug(f"Passing settings to workflow (raw): {current_run_settings}")
                     
                     # === –£–î–ê–õ–Ø–ï–ú –û–¢–õ–ê–î–û–ß–ù–´–ô –í–´–í–û–î ===
                     # log.info(f"CHECKING MODE before branch: processing_mode = '{processing_mode}' (Type: {type(processing_mode)})" )
                     # print(f"--- APP.PY PRINT CHECK: Mode is '{processing_mode}' ---")
                     # ==============================
                     
                     if processing_mode == "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤":
                         log.info("Branch: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
                         log.debug(f"Calling run_individual_processing...")
                         processing_workflows.run_individual_processing(**current_run_settings)
                         log.info("Finished run_individual_processing call.")

                     elif processing_mode == "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–∞–∂–∞":
                         log.info("Branch: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–∞–∂–∞")
                         log.debug(f"Collage Settings (pre-call): {json.dumps(current_run_settings.get('collage_mode',{}), indent=2)}")
                         
                         # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –∫–æ–ª–ª–∞–∂–∞
                         input_path = get_setting('paths.input_folder_path', '')
                         output_filename = get_setting('paths.output_filename', '')
                         abs_input_path = os.path.abspath(input_path) if input_path else ''
                         
                         log.info(f"Pre-call check: Input path = '{abs_input_path}', Output filename = '{output_filename}'")
                         
                         # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
                         if not os.access(abs_input_path, os.W_OK):
                             error_msg = f"–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –ø–∞–ø–∫—É —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏: '{abs_input_path}'"
                             log.error(error_msg)
                             raise PermissionError(error_msg)
                         
                         # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                         test_file_path = os.path.join(abs_input_path, "_test_write_permission.txt")
                         try:
                             with open(test_file_path, 'w') as f:
                                 f.write("Test write permission")
                             os.remove(test_file_path)
                             log.info(f"Test file created and removed successfully in '{abs_input_path}'")
                         except Exception as e:
                             error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤ '{abs_input_path}': {e}"
                             log.error(error_msg)
                             raise PermissionError(error_msg)
                         
                         # !!! –¢–ï–°–¢–û–í–ê–Ø –û–®–ò–ë–ö–ê –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–ê !!!
                         
                         print("--- APP.PY PRINT: BEFORE calling run_collage_processing ---") 
                         
                         try:
                             processing_workflows.run_collage_processing(**current_run_settings)
                         except Exception as collage_error:
                             # –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä—è–º–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–∞–∂–∞
                             try:
                                 # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                                 image_files = [f for f in os.listdir(abs_input_path) 
                                             if os.path.isfile(os.path.join(abs_input_path, f)) 
                                             and f.lower().endswith(('.png', '.jpg', '.jpeg'))]
                                 
                                 if image_files:
                                     # –°–æ–∑–¥–∞–µ–º –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π –∫–æ–ª–ª–∞–∂ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                     from PIL import Image
                                     first_image_path = os.path.join(abs_input_path, image_files[0])
                                     simple_collage_path = os.path.join(abs_input_path, "emergency_direct_collage.jpg")
                                     
                                     img = Image.open(first_image_path)
                                     
                                     # –ü—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∫–∞–∫ –µ—Å—Ç—å
                                     img.save(simple_collage_path, "JPEG", quality=95)
                             except Exception as direct_err:
                                 pass # –ú–æ–ª—á–∞ –ø—Ä–æ–≥–ª–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏
                             
                             # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                             raise collage_error
                         
                         print("--- APP.PY PRINT: AFTER calling run_collage_processing ---") 
                         log.info("Finished run_collage_processing call.")
                     
                     # –û–±—â–∏–π success –ø–æ—Å–ª–µ try
                     log.info("--- Processing workflow finished successfully (within try block). ---")
                     st.success("–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", icon="‚úÖ") 

                 except Exception as e:
                     log.critical(f"!!! WORKFLOW EXECUTION FAILED (Caught in app.py): {e}", exc_info=True)
                     print(f"--- APP.PY PRINT: CAUGHT EXCEPTION: {type(e).__name__}: {e} ---") 
                     
                     try:
                         # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ UI
                         st.exception(e)
                     except Exception as ui_error:
                         pass # –ú–æ–ª—á–∞ –ø—Ä–æ–≥–ª–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏
                     
                     # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                     pass # –ë–ª–æ–∫ finally –æ—Å—Ç–∞–µ—Ç—Å—è –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã

st.divider()
# --- –û–±–ª–∞—Å—Ç—å –¥–ª—è –õ–æ–≥–æ–≤ ---
st.subheader("–õ–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
if st.button("ÔøΩÔøΩ –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥", key="refresh_log_button"):
    # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç, —á—Ç–æ–±—ã text_area –æ–±–Ω–æ–≤–∏–ª—Å—è
    st.rerun()
    
with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ª–æ–≥", expanded=True):
    # –ü—Ä–æ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞
    st.text_area("–õ–æ–≥:", value=log_stream.getvalue(), height=400, key='log_output_display_area', disabled=True, label_visibility="collapsed")

# –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ –∫–æ–Ω—Ü–µ —Å–∫—Ä–∏–ø—Ç–∞
log.info("--- End of app.py execution cycle --- ")
# print("--- PRINT: End of app.py execution cycle ---") # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–ª—è –¥–æ–ø. –ø—Ä–æ–≤–µ—Ä–∫–∏

# –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –ª—é–±–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
if st.session_state.settings_changed:
    if config_manager.save_settings(st.session_state.current_settings, CONFIG_FILE):
        log.debug("Settings auto-saved successfully")
    else:
        log.error("Error auto-saving settings")
    st.session_state.settings_changed = False